// This file was generated by Mendix Business Modeler 5.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package oauthmodule.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the OauthModule module

	public static boolean aS_StartOAuthRequestHandlers(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "OauthModule.AS_StartOAuthRequestHandlers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static boolean bCo_ValidateOAuthConfig(IContext context, oauthmodule.proxies.OAuthConfig _oAuthConfig)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("OAuthConfig", _oAuthConfig == null ? null : _oAuthConfig.getMendixObject());
			return (Boolean)Core.execute(context, "OauthModule.BCo_ValidateOAuthConfig", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void nI_GetOrCreateOAuthConfig(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "OauthModule.NI_GetOrCreateOAuthConfig", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static system.proxies.User resolveUserByEmail(IContext context, String _email, String _accessToken)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Email", _email);
			params.put("AccessToken", _accessToken);
			IMendixObject result = (IMendixObject)Core.execute(context, "OauthModule.ResolveUserByEmail", params);
			return result == null ? null : system.proxies.User.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void sE_CleanupLog_AccessStateError(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "OauthModule.SE_CleanupLog_AccessStateError", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void sE_CleanupLog_XSSUnauthorized(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "OauthModule.SE_CleanupLog_XSSUnauthorized", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}