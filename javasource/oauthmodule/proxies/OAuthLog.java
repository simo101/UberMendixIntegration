// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package oauthmodule.proxies;

/**
 * 
 */
public class OAuthLog
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject oAuthLogMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "OauthModule.OAuthLog";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		AccessAttemptOn("AccessAttemptOn"),
		Message("Message"),
		IncomingDataDetail("IncomingDataDetail");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public OAuthLog(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "OauthModule.OAuthLog"));
	}

	protected OAuthLog(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject oAuthLogMendixObject)
	{
		if (oAuthLogMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("OauthModule.OAuthLog", oAuthLogMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a OauthModule.OAuthLog");

		this.oAuthLogMendixObject = oAuthLogMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'OAuthLog.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static oauthmodule.proxies.OAuthLog initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return oauthmodule.proxies.OAuthLog.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static oauthmodule.proxies.OAuthLog initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new oauthmodule.proxies.OAuthLog(context, mendixObject);
	}

	public static oauthmodule.proxies.OAuthLog load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return oauthmodule.proxies.OAuthLog.initialize(context, mendixObject);
	}

	public static java.util.List<oauthmodule.proxies.OAuthLog> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<oauthmodule.proxies.OAuthLog> result = new java.util.ArrayList<oauthmodule.proxies.OAuthLog>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//OauthModule.OAuthLog" + xpathConstraint))
			result.add(oauthmodule.proxies.OAuthLog.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of AccessAttemptOn
	 */
	public final java.util.Date getAccessAttemptOn()
	{
		return getAccessAttemptOn(getContext());
	}

	/**
	 * @param context
	 * @return value of AccessAttemptOn
	 */
	public final java.util.Date getAccessAttemptOn(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.AccessAttemptOn.toString());
	}

	/**
	 * Set value of AccessAttemptOn
	 * @param accessattempton
	 */
	public final void setAccessAttemptOn(java.util.Date accessattempton)
	{
		setAccessAttemptOn(getContext(), accessattempton);
	}

	/**
	 * Set value of AccessAttemptOn
	 * @param context
	 * @param accessattempton
	 */
	public final void setAccessAttemptOn(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date accessattempton)
	{
		getMendixObject().setValue(context, MemberNames.AccessAttemptOn.toString(), accessattempton);
	}

	/**
	 * Set value of Message
	 * @param message
	 */
	public final oauthmodule.proxies.OAuthMessage getMessage()
	{
		return getMessage(getContext());
	}

	/**
	 * @param context
	 * @return value of Message
	 */
	public final oauthmodule.proxies.OAuthMessage getMessage(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.Message.toString());
		if (obj == null)
			return null;

		return oauthmodule.proxies.OAuthMessage.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of Message
	 * @param message
	 */
	public final void setMessage(oauthmodule.proxies.OAuthMessage message)
	{
		setMessage(getContext(), message);
	}

	/**
	 * Set value of Message
	 * @param context
	 * @param message
	 */
	public final void setMessage(com.mendix.systemwideinterfaces.core.IContext context, oauthmodule.proxies.OAuthMessage message)
	{
		if (message != null)
			getMendixObject().setValue(context, MemberNames.Message.toString(), message.toString());
		else
			getMendixObject().setValue(context, MemberNames.Message.toString(), null);
	}

	/**
	 * @return value of IncomingDataDetail
	 */
	public final String getIncomingDataDetail()
	{
		return getIncomingDataDetail(getContext());
	}

	/**
	 * @param context
	 * @return value of IncomingDataDetail
	 */
	public final String getIncomingDataDetail(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.IncomingDataDetail.toString());
	}

	/**
	 * Set value of IncomingDataDetail
	 * @param incomingdatadetail
	 */
	public final void setIncomingDataDetail(String incomingdatadetail)
	{
		setIncomingDataDetail(getContext(), incomingdatadetail);
	}

	/**
	 * Set value of IncomingDataDetail
	 * @param context
	 * @param incomingdatadetail
	 */
	public final void setIncomingDataDetail(com.mendix.systemwideinterfaces.core.IContext context, String incomingdatadetail)
	{
		getMendixObject().setValue(context, MemberNames.IncomingDataDetail.toString(), incomingdatadetail);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return oAuthLogMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final oauthmodule.proxies.OAuthLog that = (oauthmodule.proxies.OAuthLog) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "OauthModule.OAuthLog";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
