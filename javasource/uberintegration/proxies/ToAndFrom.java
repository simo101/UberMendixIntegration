// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package uberintegration.proxies;

/**
 * 
 */
public class ToAndFrom extends googlemaps.proxies.Location
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "UberIntegration.ToAndFrom";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Address("Address"),
		Latitude("Latitude"),
		Longitude("Longitude"),
		MarkerAttribute("MarkerAttribute"),
		To("UberIntegration.To"),
		From("UberIntegration.From");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ToAndFrom(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "UberIntegration.ToAndFrom"));
	}

	protected ToAndFrom(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject toAndFromMendixObject)
	{
		super(context, toAndFromMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("UberIntegration.ToAndFrom", toAndFromMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a UberIntegration.ToAndFrom");
	}

	/**
	 * @deprecated Use 'ToAndFrom.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static uberintegration.proxies.ToAndFrom initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return uberintegration.proxies.ToAndFrom.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static uberintegration.proxies.ToAndFrom initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new uberintegration.proxies.ToAndFrom(context, mendixObject);
	}

	public static uberintegration.proxies.ToAndFrom load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return uberintegration.proxies.ToAndFrom.initialize(context, mendixObject);
	}

	public static java.util.List<uberintegration.proxies.ToAndFrom> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<uberintegration.proxies.ToAndFrom> result = new java.util.ArrayList<uberintegration.proxies.ToAndFrom>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//UberIntegration.ToAndFrom" + xpathConstraint))
			result.add(uberintegration.proxies.ToAndFrom.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of To
	 */
	public final uberintegration.proxies.Route getTo() throws com.mendix.core.CoreException
	{
		return getTo(getContext());
	}

	/**
	 * @param context
	 * @return value of To
	 */
	public final uberintegration.proxies.Route getTo(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		uberintegration.proxies.Route result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.To.toString());
		if (identifier != null)
			result = uberintegration.proxies.Route.load(context, identifier);
		return result;
	}

	/**
	 * Set value of To
	 * @param to
	 */
	public final void setTo(uberintegration.proxies.Route to)
	{
		setTo(getContext(), to);
	}

	/**
	 * Set value of To
	 * @param context
	 * @param to
	 */
	public final void setTo(com.mendix.systemwideinterfaces.core.IContext context, uberintegration.proxies.Route to)
	{
		if (to == null)
			getMendixObject().setValue(context, MemberNames.To.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.To.toString(), to.getMendixObject().getId());
	}

	/**
	 * @return value of From
	 */
	public final uberintegration.proxies.Route getFrom() throws com.mendix.core.CoreException
	{
		return getFrom(getContext());
	}

	/**
	 * @param context
	 * @return value of From
	 */
	public final uberintegration.proxies.Route getFrom(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		uberintegration.proxies.Route result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.From.toString());
		if (identifier != null)
			result = uberintegration.proxies.Route.load(context, identifier);
		return result;
	}

	/**
	 * Set value of From
	 * @param from
	 */
	public final void setFrom(uberintegration.proxies.Route from)
	{
		setFrom(getContext(), from);
	}

	/**
	 * Set value of From
	 * @param context
	 * @param from
	 */
	public final void setFrom(com.mendix.systemwideinterfaces.core.IContext context, uberintegration.proxies.Route from)
	{
		if (from == null)
			getMendixObject().setValue(context, MemberNames.From.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.From.toString(), from.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final uberintegration.proxies.ToAndFrom that = (uberintegration.proxies.ToAndFrom) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "UberIntegration.ToAndFrom";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
